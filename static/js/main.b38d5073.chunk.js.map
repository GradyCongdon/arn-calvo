{"version":3,"sources":["Node.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Label","styled","span","p","prop","props","NodeComponent","value","className","nR","width","height","root","left","right","inOrder","node","callback","Main","main","Tree","tree","x","y","nodes","push","console","log","Nodes","map","i","style","position","top","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAEMA,EAAQC,IAAOC,KAAV,gMAgCLC,EAAI,SAACC,GAAD,OAAgC,SAACC,GAAD,OAAsBA,EAAMD,KAEzDE,EAAgBL,aAZK,SAAC,GAAqC,IAAnCM,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,UAC1C,OACE,yBAASA,UAAWA,EAApB,SACE,cAACR,EAAD,UAAQO,QASeN,CAAH,8YACfE,EAAE,SACDA,EAAE,WCvBRM,G,MAAK,SAACC,EAAeC,GAyBzB,MAAO,CACLC,KATQ,CACRL,MAAO,IACPM,KAlBQ,CACRN,MAAO,IACPG,QACAC,OAAc,IAANA,EACRE,KAAM,KACNC,MAAO,MAcPA,MAXQ,CACRP,MAAO,IACPG,QACAC,SACAE,KAAM,KACNC,MAAO,MAOPJ,QACAC,OAAQ,MAWNI,EAAU,SAAVA,EAAWC,EAAYC,GAC3BA,EAASD,GACLA,EAAKH,MAAME,EAAQC,EAAKH,KAAMI,GAC9BD,EAAKF,OAAOC,EAAQC,EAAKF,MAAOG,IAIhCC,EAAOjB,IAAOkB,KAAV,mHAOJC,EAAO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,EAAGC,EAAa,EAAbA,EACjBC,EAAQ,GAEdT,EAAQM,EAAKT,MADG,SAACU,GAAD,OAAYE,EAAMC,KAAKH,MAEvCI,QAAQC,IAAIH,GACZ,IAAMI,EAAQJ,EAAMK,KAAI,SAACb,EAAMc,GAAP,OAAa,cAACxB,EAAD,eAA2BU,GAAPc,MACnDC,EAAQ,CACZC,SAAU,WACVC,IAAKV,EACLV,KAAMS,GAER,OACE,qBAAKS,MAAOA,EAAZ,SACGH,KAoBQM,MAdf,WAEE,OACE,cAAChB,EAAD,UACE,gCACE,cAAC,EAAD,CAAMG,KAAMZ,EAAG,GAAI,KAAMa,EAAG,IAAKC,EAAG,MACpC,cAAC,EAAD,CAAMF,KAAMZ,EAAG,IAAK,IAAKa,EAAG,IAAUC,EAAG,MACzC,cAAC,EAAD,CAAMF,KAAMZ,EAAG,IAAK,KAAMa,EAAG,IAAgBC,EAAG,MAChD,cAAC,EAAD,CAAMF,KAAMZ,EAAG,IAAK,IAAKa,EAAG,KAAsBC,EAAG,YC3E9CY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b38d5073.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Label = styled.span`\n  --size: 1rem;\n  position: absolute;\n  font-size: var(--size);\n  line-height: var(--size);\n  bottom: calc(var(--size) / -2);\n  left: calc(-1 * var(--size));\n`;\n\nexport interface Node {\n  value: string;\n  height: number;\n  width: number;\n  left: Node | null;\n  right: Node | null;\n}\n\n\ninterface NodeProps extends Node {\n  className?: string;\n}\n\nexport const NodeComponentPlain = ({ value, className }: NodeProps) => {\n  return (\n    <section className={className}>\n      <Label>{value}</Label>\n    </section>\n  )\n}\n\n\ntype NodeStyleProps = Omit<Node, 'left' | 'right' | 'className'>;\nconst p = (prop: keyof NodeStyleProps) => (props: NodeProps) => props[prop];\n\nexport const NodeComponent = styled(NodeComponentPlain)`\n  width: ${p('width')}px;\n  height: ${p('height')}px;\n  margin-left: 30px;\n  border: 1.5px solid black;\n  border-right: none;\n  border-bottom: none;\n  border-radius: 10px;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  position: relative;\n  &:first-of-type {\n    height: 0;\n    border: none;\n  }\n  &:last-of-type {\n    border-bottom: 1.5px solid black;\n  }\n`;","import { useState } from 'react';\nimport { NodeComponent, Node } from './Node';\nimport './App.css';\nimport styled from 'styled-components';\n\n\nconst n = ({ value, left = null, right = null, width = 220, height = 90 }: any) => ({\n  value,\n  left,\n  right,\n  width,\n  height,\n});\n\n\nconst nR = (width: number, height: number) => {\n  const B = {\n    value: 'B',\n    width,\n    height: height * (5 / 2),\n    left: null,\n    right: null,\n  }\n\n  const A = {\n    value: 'A',\n    width,\n    height,\n    left: null,\n    right: null,\n  };\n\n  const C = {\n    value: 'C',\n    left: B,\n    right: A,\n    width,\n    height: 0,\n  }\n\n  return {\n    root: C,\n  }\n}\n\n\n\n\nconst inOrder = (node: Node, callback: any) => {\n  callback(node)\n  if (node.left) inOrder(node.left, callback);\n  if (node.right) inOrder(node.right, callback);\n}\n\n\nconst Main = styled.main`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: auto;\n`;\n\nconst Tree = ({ tree, x, y }: any) => {\n  const nodes = [] as Node[];\n  const addNode = (x: any) => nodes.push(x);\n  inOrder(tree.root, addNode);\n  console.log(nodes);\n  const Nodes = nodes.map((node, i) => <NodeComponent key={i} {...node} />);\n  const style = {\n    position: 'absolute' as any,\n    top: y,\n    left: x,\n  }\n  return (\n    <div style={style}>\n      {Nodes}\n    </div>\n  )\n}\n\n\nfunction App() {\n\n  return (\n    <Main>\n      <div>\n        <Tree tree={nR(20, 100)} x={500} y={200} />\n        <Tree tree={nR(250, 50)} x={500 + 20} y={200 - 100} />\n        <Tree tree={nR(560, 175)} x={500 + 20 + 250} y={200 - 100 + 50} />\n        <Tree tree={nR(150, 95)} x={500 + 20 + 250 + 560} y={200 - 100} />\n      </div>\n    </Main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}